openapi: 3.0.1
info:
  title: Capstone BE Starter
  version: 1.0.0
servers:
  - url: http://localhost:8081
    description: localhost
components:
  schemas:
    User:
      additionalProperties: false
      type: object
      properties:
        firstName:
          type: string
          minLength: 2
        lastName:
          type: string
          minLength: 2
        email:
          type: string
        password:
          type: string
      required:
        - firstName
        - lastName
        - email
        - password
    UserResponse:
      additionalProperties: false
      type: object
      properties:
        _id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
    Sneaker:
      additionalProperties: false
      type: object
      properties:
        marca:
          type: string
        genero:
          type: string
        talla:
          type: string  
        img:
          type: string  
        descripcion:
          type: string     
        cantidad:
          type: number 
        precio:
          type: number  
      required:
        - marca
        - genero
        - talla
        - img
        - descripcion
        - cantidad
        - precio               
    SneakerResponse:
      additionalProperties: false
      type: object
      properties:
        _id:
          type: string
        marca:
          type: string
        genero:
          type: string
        talla:
          type: string  
        img:
          type: string  
        descripcion:
          type: string     
        cantidad:
          type: number 
        precio:
          type: number                                            
    Login:
      additionalProperties: false
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    LoginSuccess:
      additionalProperties: false
      type: object
      properties:
        token:
          type: string
        email:
          type: string
        statusCode:
          type: string
    ShopingCart:
      additionalProperties: false
      type: object
      properties:
        sneaker_id:
          type: string
        user_id:
          type: string
        datebuy:
          type: string  
        unit:
          type: string  
      required:
        - sneakerid
        - userid
        - unit
    ShopingCartResponse:
      additionalProperties: false
      type: object
      properties:
        shopingcart_id:
          type: string        
        sneaker_id:
          type: string
        userid:
          type: string
        datebuy:
          type: string  
        unit:
          type: string  
    OperationalError:
      allOf:
        - type: object
          properties:
            message:
              type: string
          required:
            - message
        - $ref: '#/components/schemas/ErrorStatusCode'
    ErrorStatusCode:
      type: object
      properties:
        statusCode:
          type: integer
          minimum: 400
          maximum: 599
      required:
        - statusCode
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    username:
      in: path
      name: username
      required: true
      schema:
        $ref: '#/components/schemas/User'
      description: The username of the user
  headers:
    WWW-Authenticate:
      description: Includes the URI location to receive a bearer token
      required: true
      schema:
        type: string
        enum:
          - >-
            Bearer realm="POST your username and password to /auth/login to
            receive a token"
  responses:
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OperationalError'
    '401':
      description: Unauthorized
      headers:
        WWW-Authenticate:
          $ref: '#/components/headers/WWW-Authenticate'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OperationalError'
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OperationalError'
paths:
  /auth/login:
    post:
      summary: Login user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccess'
        '400':
          $ref: '#/components/responses/400'
  /auth/logout:
    get:
      summary: Logout a user
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/401'
  /api/users:
    get:
      summary: Get a list of users
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: firstName
          in: query
          description: Get users with a specific first name (fuzzy, case insensitve)
          required: false
          schema:
            firstName:
            type: string
        - name: lastName
          in: query
          description: Get users with a specific last name (fuzzy, case insensitve)
          required: false
          schema:
            firstName:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/400'
    post:
      summary: Create a new user
      operationId: createUser
      x-controller: users
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/400'
  /api/users/{email}:
    put:
      summary: Update user
      tags:
        - Users
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
            description: The email address of the user
      security:
        - bearerAuth: []
      requestBody:
        description: The user updates
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
  /api/sneaker/{id}:
    get:
      summary: Get a list of sneakers
      parameters:      
      - name: id
        in: path
        description: id
        required: true
        style: simple
        explode: false
        schema:
          type: string        
      tags:
        - Sneaker
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/SneakerResponse'
        '400':
          $ref: '#/components/responses/400'
    put:
      summary: Update sneaker
      tags:
        - Sneaker
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: The Sneaker data update
      security:
        - bearerAuth: []
      requestBody:
        description: The sneaker updates
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sneaker'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SneakerResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'     
    delete:
      summary: Delete sneaker
      tags:
        - Sneaker
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: The Sneaker data delete
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SneakerResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'              
  /api/sneaker:
    get:
      summary: Get a list of sneakers
      parameters:
        - in: query
          name: busqueda
          required: false
          schema:
            type: string
            description: The criteria of search       
      tags:
        - Sneaker
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/SneakerResponse'
        '400':
          $ref: '#/components/responses/400'
    post:
      summary: Create a new sneaker
      operationId: createSneaker
      x-controller: sneaker
      tags:
        - Sneaker
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sneaker'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/SneakerResponse'
        '400':
          $ref: '#/components/responses/400'
  /api/sneaker/file:
    post:
      summary: Upload a file
      operationId: uploadFile
      x-controller: sneaker
      tags:
        - Sneaker
      requestBody:
        description: Solicitud para subir un archivo
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                marca:
                  type: string
                genero:
                  type: string
                talla:
                  type: string   
                descripcion:
                  type: string     
                cantidad:
                  type: number 
                precio:
                  type: number                            
                file:
                  type: string
                  format: binary
              required:
                - marca
                - genero
                - talla
                - descripcion
                - cantidad
                - precio   
                - file                
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/SneakerResponse'
        '400':
          $ref: '#/components/responses/400'          
  /api/buy:
    post:
      summary: Add buy to shopingcart
      tags:
        - Buy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShopingCart'        
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/ShopingCartResponse'
        '400':
          $ref: '#/components/responses/400'